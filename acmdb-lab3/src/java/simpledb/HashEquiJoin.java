package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc tpdc;
	private HashMap<Field,List<Tuple>> hashmap;
	private Iterator<Tuple> it;
	private Tuple tp;
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p=p;
    	this.child1=child1;
    	this.child2=child2;
    	getTpdc();
    	getHashTable();
    	it=null;
    	tp=null;
    }
    private void getHashTable() {
		// TODO Auto-generated method stub
    	hashmap=new HashMap<>();
    	try {
			child1.open();
			while (child1.hasNext()) {
				Tuple tp=child1.next();
				Field key=tp.getField(p.getField1());
				if (hashmap.containsKey(key)) hashmap.get(key).add(tp);
				else {hashmap.put(key, new ArrayList<>());hashmap.get(key).add(tp);}
			}
			child1.rewind();
			child1.close();
		} catch (DbException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TransactionAbortedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private void getTpdc() {
    	
		TupleDesc tpdc1;
		TupleDesc tpdc2;
		tpdc1=child1.getTupleDesc();
		tpdc2=child2.getTupleDesc();
    	tpdc=TupleDesc.merge(tpdc1, tpdc2);
		
	}
    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return tpdc;
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	child1.open();
    	child2.open();
    	super.open();
    	it=null;
    	tp=null;
    }

    public void close() {
        // some code goes here
    	child1.close();
    	child2.close();
    	super.close();
    	it=null;
    	tp=null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	child1.rewind();
    	child2.rewind();
    	super.close();
    	super.open();
    	it=null;
    	tp=null;
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	while (true) {
    		if (tp==null) tp=child2.next();
    		if (hashmap.containsKey(tp.getField(p.getField2()))) {
    			if (it==null) it=hashmap.get(tp.getField(p.getField2())).iterator();
    			while (it.hasNext()) {
    				Tuple t1=it.next();
    				if (p.filter(t1, tp)) return makeTuple(t1,tp);
    			}
    		}
    		if (child2.hasNext()) {tp=child2.next();it=null;}
    		else break;
    	}
        return null;
    }
    
    private Tuple makeTuple(Tuple t1, Tuple t2) {
    	Tuple tp=new Tuple(tpdc);
    	Iterator<Field> i1=null;
    	if (t1!=null) i1=t1.fields();
    	int count=0;
    	if (i1!=null)
    		while (i1.hasNext()) {
    			tp.setField(count++, i1.next());
    		}
    	if (t2!=null) i1=t2.fields();
    	while (i1.hasNext()) {
    		tp.setField(count++, i1.next());
    	}
		return tp;
	}
    
    @Override
    public DbIterator[] getChildren() {
        // some code goes here
    	DbIterator temp[]=new DbIterator[2];
    	temp[0]=child1;
    	temp[1]=child2;
        return temp;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes herechild1=children[0];
    	child2=children[1];
    	getTpdc();
    	getHashTable();
    	it=null;
    	tp=null;
    }
    
}
